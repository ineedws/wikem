#!/usr/bin/env ruby


# ENV['RAILS_ENV'] ||= 'development'
# require File.dirname(__FILE__) + '/../config/environment'
require 'digest/md5'
require 'csv'
require 'ftools'
require 'mediawiki-gateway/lib/media_wiki'

curr_time = Time.now
RAILS_ROOT = File.dirname(__FILE__)

class Page
  attr_accessor :name, :folder, :content, :last_update, :author_name
  
end

# replace internal links (old url => new url) in given content field
def replace_redirect_urls(content, redirects)
	# parse all internal urls from content field 
	replace_urls = {}
	page_urls = content.scan(/\/wiki\/[a-z0-9:\-\'\/\._()]+/ix)
	page_urls.each do |url|
		url.gsub!('/wiki/', '')	
		replace_urls[url] = redirects[url] if redirects.key?(url)
	end	
	# replace those urls to new ones
	replace_urls.each do |old_url, new_url|
		content.gsub!("/wiki/#{old_url}", "/wiki/#{new_url}")
	end
	content
	
	# or we can just use next code instead all above:
	#redirects.each do |old_url, new_url|
	#	content.gsub!("/wiki/#{old_url}", "/wiki/#{new_url}")
	#end
	#content
end


def html2text html
  # strip new lines
  html.gsub!(/\n/, '')

  # replace h2 with astrics
  html.gsub!(/<\/h2>/, "***\n")
  html.gsub!(/<h2>/, "***")

  # replace h3 with astrics
  html.gsub!(/<\/h3>/, "***\n")
  html.gsub!(/<h3>/, '***')

  # get rid of paragraph
  html.gsub!(/<\/p>/, "\n")
  html.gsub!(/<p>/, '')

  # handle the tables
  html.gsub!(/<\/tr>/, "\n")
  html.gsub!(/<\/td>/, "\t")
  
  # get rid of ol li
  html.gsub!(/<\/li>/, "\n")
  html.gsub!(/<li>/, "* ")
  
  # get rid of everything else
  html.gsub!(/<[^>]*>/, '')
  
  html.gsub!(/&nbsp;/,' ')
  
  CGI.unescapeHTML(html)
end


if File.open('/www/wikem-server/lastupdate').mtime > File.open('/www/dl.android.wikem.org/info.xml').mtime
	puts "An update has been made to the wiki, updating mobile clients"
else
	puts "No updates available, exiting..."
	#exit
end

puts "Downloading WikEM Data"

current_stamp = Time.now.to_i

mw = MediaWiki::Gateway.new('http://www.wikem.org/w/api.php')
mw.login('robot','wikem-vona')

# get all redirects
redirects = mw.list_redirects_with_targets

# get all pages
page_names = mw.list('')

i=0
@pages = []
page_names.each do |n|
  i += 1
  puts "#{i} - Download page: #{n}"
  page = Page.new
  page.name = n
  page.folder = mw.get_categories(n)
  page.content = mw.render(n)
  page.content = replace_redirect_urls(page.content, redirects)
  page.last_update = current_stamp
  page.author_name = 'WikEM'
  @pages << page
end


# generate an xml file
database_file = RAILS_ROOT +  "/public/database-#{curr_time.year}-#{curr_time.month}-#{curr_time.day}.xml"
puts "Constructing XML File #{File.basename(database_file)} (Android Version)"
fp_xml = File.open(database_file, 'w')

require 'rubygems'
require 'builder'

# Write new xml file (android version)
xml = Builder::XmlMarkup.new(:target => fp_xml)

xml.instruct!
xml.root("created" => curr_time.to_i) {

  folders = @pages.collect { |x| x.folder.first }.uniq
  xml.categories {
   folders.each do |f|
     xml.category("title" => f)
   end
  }
  
  xml.pages {
    @pages.each do |p|
      xml.page("id" => p.name.downcase.gsub(/\s/,'_')) {
        xml.name(p.name)
        xml.content(p.content)
        xml.folder(p.folder.first)
        xml.last_update(p.last_update)
        xml.author(p.author_name)
      }
    end
  }
}
fp_xml.close
File.copy(database_file, "/www/dl.android.wikem.org/database.xml")

# write info for the new info file
info_file = File.dirname(__FILE__) + "/public/info.xml"
fp_xml = File.open(info_file, 'w')
xml_info = Builder::XmlMarkup.new(:target => fp_xml)
xml_info.instruct!
xml_info.root {
  xml_info.lastupdate("epoch" => curr_time.to_i)
  xml_info.size("byte" => File.size(database_file), "num" => @pages.size)
}
fp_xml.close
File.copy(info_file, "/www/dl.android.wikem.org/info.xml")

