<?php
# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename         = "WikEM";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "/w";
$wgArticlePath = "/wiki/$1";
$wgUsePathInfo = true;

$wgScriptExtension  = ".php";

## The relative URL path to the skins directory
$wgStylePath        = "$wgScriptPath/skins";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo             = "$wgStylePath/common/images/WikEM-Logo.png";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = "admin@wikem.org";
$wgPasswordSender = "admin@wikem.org";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "localhost";
$wgDBname           = "wikidb";
$wgDBuser           = "wikiuser";
$wgDBpassword       = "fdxfdx1";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
#$wgMainCacheType = CACHE_NONE;
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = array();
 

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
# $wgUseImageMagick = true;
# $wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
$wgCacheDirectory = "$IP/cache";
$wgUseFileCache = true;
$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

$wgSecretKey = "a051d1e98e4d142e28ef9785ea6e9022cf96ed4c2539a2878e4077701bdff3c6";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
#$wgDefaultSkin = 'vector';
##ck: now use different mobile-friendly skin and vector only for nonmobile use
##see bottom of page


## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared .
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

# user premissions
$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['*']['writeapi'] = false;
$wgGroupPermissions['*']['createpage'] = false;
$wgGroupPermissions['*']['createtalk'] = false;
$wgShowIPinHeader = false;

$wgGroupPermissions['user']['createpage'] = false;
$wgGroupPermissions['user']['edit'] = false;
$wgGroupPermissions['user']['minoredit'] = false;
$wgGroupPermissions['user']['move'] = true;
$wgGroupPermissions['user']['writeapi'] = false;

$wgGroupPermissions['writer']['createpage'] = true;
$wgGroupPermissions['writer']['edit'] = true;
 
# auto promote
$wgAutopromote = array ( 'writer' => APCOND_EMAILCONFIRMED );

# rate limiting
$wgRateLimitLog = 'rate-limit-log.log';

# require email address
$wgEmailConfirmToEdit = true;

# display author info
$wgMaxCredits = 1;
 

# 7/6/11 no longer using the following. Using FCKEditor.php instead
# WYSIWIG Editor
# /www/www.wikem.org/w/extensions/WYSIWYG
# require_once("$IP/extensions/WYSIWYG/WYSIWYG.php");

#FCK editor for rich text editing
# /www/www.wikem.org/w/extensions/FCKeditor
//require_once("$IP/extensions/FCKeditor/FCKeditor.php");
//$wgUseAjax = 'true'; //required for FCKeditor //by default i think turned on anyways

$wgShowExceptionDetails = true;


# Wiki Updated Hook
$wgHooks['ArticleSaveComplete'][] = 'updateMobileClients';
function updateMobileClients() {
	`touch /www/wikem-server/lastupdate`;
	return true; 
}

#Wiki hook for deletions
$wgHooks['ArticleDeleteComplete'][] = 'updateMobileClients2';
function updateMobileClients2() {
        `touch /www/wikem-server/lastupdate`;
        return true;
}

#Wiki hook for restoration
$wgHooks['ArticleUndelete'][] = 'updateMobileClients3';
function updateMobileClients3() {
        `touch /www/wikem-server/lastupdate`;
        return true;
}

#Wiki hook for new articles
$wgHooks['ArticleInsertComplete'][] = 'updateMobileClients4';
function updateMobileClients4() {
        `touch /www/wikem-server/lastupdate`;
        return true;
}


# hook for USER script
$wgHooks['AddNewAccount'][] = 'updateUsers';
function updateUsers( $user, $byEmail ) { 
     `touch /www/wikem-server/last-user-created`;
return true;
}

# hook for (image) FILE upload script
#########################################
#$image: the file (object) saved UploadForm object
#Return value: True, if other hooks shall be evaluated; 
#False if evaluation shall stop. If no return value is given, an Error occurs
$wgHooks['SpecialUploadComplete'][] = 'updateImageXml';
function updateImageXml( $form ) { 
	'touch /www/wikem-server/last-file-upload';
return true;
 }

$wgHooks['FileUpload'][] = 'fuhook';

function fuhook( $file ) {
        'touch /www/wikem-server/last-file-upload';
return true;
 }



#ACTUALLY the limits for file uploads are overwridden by PHP config
#will need to midfu upload_max_filesize  in php.ini
#variable for max bytes for file uplaod
$wgMaxUploadSize = 307200; 

#Add hooks for extension QuestyCaptcha for anti bot protection
require_once("$IP/extensions/ConfirmEdit/ConfirmEdit.php");
require_once("$IP/extensions/ConfirmEdit/QuestyCaptcha.php");

$wgCaptchaClass = 'QuestyCaptcha';
	#the following are questions that will be asked for anti-bot
	 $wgCaptchaQuestions[] = array( 'question' => "EM stands for", 'answer' => "Emergency Medicine" );
	 $wgCaptchaQuestions[] = array( 'question' => 'A in ABCs stands for: ', 'answer' => 'airway' );
	$wgCaptchaQuestions[] = array( 'question' => 'B in ABCs stands for: ', 'answer' => 'breathing' );
	$wgCaptchaQuestions[] = array( 'question' => 'C in ABCs stands for: ', 'answer' => 'circulation' );

# $wgCaptchaQuestions[] = array( 'question' => "What is this wiki's name?", 'answer' => "$wgSitename" );

##change skin for mobile users
if (preg_match("/iphone/i", $_SERVER['HTTP_USER_AGENT'])) {
    $wgDefaultSkin = 'wptouch';
} elseif (preg_match("/android/i", $_SERVER['HTTP_USER_AGENT'])) {
    $wgDefaultSkin = 'wptouch';
} elseif (preg_match("/webos/i", $_SERVER['HTTP_USER_AGENT'])) {
    $wgDefaultSkin = 'wptouch';
} elseif (preg_match("/ipod/i", $_SERVER['HTTP_USER_AGENT'])) {
    $wgDefaultSkin = 'wptouch';
} elseif (preg_match("/ipad/i", $_SERVER['HTTP_USER_AGENT'])) {
    $wgDefaultSkin = 'wptouch';
} else {
    $wgDefaultSkin = 'vector';
}

require_once("$IP/extensions/Cite/Cite.php"); 
require_once('extensions/MailChimpForms/MailChimpForms.php');
require_once "$IP/extensions/RSS/RSS.php";

require_once("$IP/extensions/WikiEditor/WikiEditor.php");
$wgDefaultUserOptions['usebetatoolbar'] = 1;
$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
$wgDefaultUserOptions['wikieditor-preview'] = 1;
$wgDefaultUserOptions['wikieditor-publish'] = 1;

//manual sitemap
//require_once($IP.'/extensions/ManualSitemap/ManualSitemap.php');
# Notify all web sites you want about the update of sitemap
$sitemap = urlencode('http://www.wikem.org/w/sitemap.xml');
$ManualSitemap_Notify=array();
$ManualSitemap_Notify[] = 'http://www.google.com/webmasters/sitemaps/ping?sitemap='.$sitemap;
$ManualSitemap_Notify[] = 'http://search.yahooapis.com/SiteExplorerService/V1/ping?sitemap='.$sitemap;
$ManualSitemap_Notify[] = 'http://webmaster.live.com/ping.aspx?sitemap='.$sitemap;
$ManualSitemap_Notify[] = 'http://api.moreover.com/ping?u='.$sitemap;
$ManualSitemap_Notify[] = 'http://submissions.ask.com/ping?sitemap='.$sitemap;

# Exclude pages from sitemap (value "1" means "exclude"):

#Please refer to
#http://www.mediawiki.org/wiki/Help:Namespaces
#for more detailed explanation
$ManualSitemap_Exclude=array(
        NS_MAIN =>           '0',       NS_TALK =>           '1',
        NS_USER =>           '1',       NS_USER_TALK =>      '1',
        NS_PROJECT =>        '0',       NS_PROJECT_TALK =>   '1',
        NS_IMAGE =>          '0',       NS_IMAGE_TALK =>     '1',
        NS_MEDIAWIKI =>      '1',       NS_MEDIAWIKI_TALK => '1',
        NS_TEMPLATE =>       '1',       NS_TEMPLATE_TALK =>  '1',
        NS_HELP =>           '1',       NS_HELP_TALK =>      '1',
        NS_CATEGORY =>       '1',       NS_CATEGORY_TALK =>  '1'
);

$ManualSitemap_ServerBase = "http://www.wikem.org";
#With that all sitemap entries get this as their base url. If not set $wgServer is used

//$ManualSitemap_ExcludeSites[] = 'page title to exclude';
#or
//$ManualSitemap_ExcludeSites = array('page1 title to exclude', 'page2 title to exclude');
#to exclude some pages from the sitemap. The pages exclude name must be equal to the name/title shown at the Special:ManualSitemap site.